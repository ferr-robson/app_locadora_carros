Uma API eh uma forma de conectar duas partes, sem a necessidade delas se conhecerem
	=> A exemplo, temos os SOs e as aplicacoes
		-> A aplicacao eh um conjunto entradas e saidas que se relacionam com o usuario
		-> Essa aplicacao precisa interagir com o Hardware do sistema (CPU, GPU, memoria, etc.)
		-> Para que as aplicacoes nao tenham que, necessariamente, fazer a conexao entre Hardware e aplicacao - o que iria gerar muito trabalho, uma vez que seria necessario grande conhecimento para desenvolver uma aplicacao simples (sem contar com as diferentes formas como o hardware pode se comportar) - o Kernel do Sistema Operacional faz uma ponte entre os dois. Facilitando a desenvolvimento de aplicacoes devido a padronizacao
	=> Outro exemplo mais abstrato eh o de um carro
		-> O carro possui uma serie de implementacao de dificil acesso ao motorista. Eh muito dificil para que o motorita saiba como acinar os freios, utilizar a parte eletrica e o motor, manualmente.
		-> Para fazer o intermedio entre a Implementcao e o motorista usa-se uma "API"
			> Nesse caso, a API seria o cambio, pedal, painel, etc. Esses itens fazem a conexao com a Implementacao sem que o motorista precise saber como eles funcionam

----------------------------------------------------------------------------------------------------

Postman
	=> Baixando
		-> Link: <postman.com/downloads>
		-> Basta abrir o instalador. O programa faz a instalcao sozinho
	=> Ajuda no desenvolvimento de APIs webservices REST

----------------------------------------------------------------------------------------------------

Nota:
	=> php artisan make:model --migration --controller --resource Modelo
	 	-> php artisan make:model -mcr Modelo
	=> php artisan make:model --all Modelo
		-> php artisan make:model -a Modelo
	=> Os comandos acima sao iguais
		-> O que mais difere é o --all que cria uma factory e um seeder

----------------------------------------------------------------------------------------------------

Criacao do banco
	=> create database lc;

----------------------------------------------------------------------------------------------------

Para enviar dados, usando o request, pode-se usar o body do request
	=> No PostMan pode-se faze isso na guia 'body'
	=> O metodo mais usado para enviar dados eh o 'x-www-form-urlencoded', mas ainda ha outras formas
	=> Depois de definir os parametros que serao usados, posso ver como eles sao recebidos na sub-guia 'preview'

----------------------------------------------------------------------------------------------------

A aplicacao, atualmente, funciona da seguinte forma:
	=> Cliente > Request (com o body codificado pelo x-www-form-urlencoded) usando o verbo HTTP Post > aplicacao (processa o request e retorna uma resposta) > Response (header) (resposta do request, do tipo 'application/json')

----------------------------------------------------------------------------------------------------

Rota index e rota show
	=> Ambas retornam registros do banco
	=> index retorna todos os registros de determinado tipo
	=> show retorna um registro especifico daquele tipo

----------------------------------------------------------------------------------------------------

URI = protocolo/URL/URN
URI = https://bootstrap.build/themes
	=> protocolo: https://
	=> URL: bootstrap.build
	=> URN: themes

----------------------------------------------------------------------------------------------------

No PostMan, para poder fazer o envio de arquivos, devo selecionar a opcao 'form-data', nao 'x-www-form-urlencoded'
	=> Essa opção permite selecionar um arquivo para fazer o upload

----------------------------------------------------------------------------------------------------

Criando um link entre o storage e a pasta publica da aplicacao
	=> php artisan storage:link
	=> Isso possibilita acessar as imagens e outros arquivos que foram salvos

----------------------------------------------------------------------------------------------------

Passando ':' no link para que se possa fazer um explode do link recebido no backend
	=> localhost:8000/api/modelo?filtro=nome:=:Ford Ka 1.0
		-> Resultado: nome = Ford Ka 1.0

----------------------------------------------------------------------------------------------------

Design Pattern Repository
	=> Eh um padrao de projeto
	=> Faz a tratativa dos filtros passados da view para o backend
	=> Possibilita a nao replicacao de codigo (como a que ocorre em MarcaController.index() e ModeloController.index())

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

Token de autorizacao
	=> Como as APIs que estamos usando fazem requisicoes unicas, nao eh possivel salvar a $_SESSION para conter os dados do usuario logado
	=> Para fazer o trabalho da $_SESSION, usa-se os tokens JWT, que concede autorizacao as partes do site
	=> O Token JWT eh composto por:
		-> Header
		-> Payload
		-> Signature

----------------------------------------------------------------------------------------------------

Instalacao do JWT Auth, usando o Composer
	=> composer require tymon/jwt-auth